let forceUpdateList=[];const reRender=()=>{requestAnimationFrame(()=>{for(let{component:e,resolve:t}of forceUpdateList)e&&e.forceUpdate&&e.forceUpdate(t);forceUpdateList=[]})},RCheatState=(e,t,n)=>{let o={},r=e,a={};function c(e){return r!=e?(r=e,new Promise(e=>{for(let t in o){let n=forceUpdateList.filter(e=>e.component_key==t)[0];n?a[n.component_key].push(e):(a[t]=a[t]||[e],forceUpdateList.push({component_key:t,component:o[t],resolve(){for(let e of a[t])e(r)}}))}reRender()})):new Promise(e=>e(r))}let l="function"==typeof t&&t(c);function _(e){if(o[e.___rcheat_component_key])throw new Error("component already inited.");return Object.defineProperty(e,"___rcheat_component_key",{value:Math.random(),writable:!1}),o[e.___rcheat_component_key]=e,n?{set:e=>c(e),get:()=>r}:{get:()=>r}}return all_components.push({components:o,onDelete:function(){0==Object.keys(o).length&&"function"==typeof l&&l()}}),_.set=(e=>c(e)),_.get=(()=>r),_};let all_components=[];function RCheatUnmount(e){for(let{components:t,onDelete:n}of all_components)t[e.___rcheat_component_key]&&(delete t[e.___rcheat_component_key],n())}const readable=(e,t)=>RCheatState(e,t,!1),writable=(e,t)=>RCheatState(e,t,!0),unmount=e=>RCheatUnmount(e),RCS={readable:readable,writable:writable,unmount:unmount};export default RCS;